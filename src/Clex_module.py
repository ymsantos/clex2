# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Clex_module', [dirname(__file__)])
        except ImportError:
            import _Clex_module
            return _Clex_module
        if fp is not None:
            try:
                _mod = imp.load_module('_Clex_module', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Clex_module = swig_import_helper()
    del swig_import_helper
else:
    import _Clex_module
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Clex_module.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Clex_module.SwigPyIterator_value(self)
    def incr(self, n = 1): return _Clex_module.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _Clex_module.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Clex_module.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Clex_module.SwigPyIterator_equal(self, *args)
    def copy(self): return _Clex_module.SwigPyIterator_copy(self)
    def next(self): return _Clex_module.SwigPyIterator_next(self)
    def __next__(self): return _Clex_module.SwigPyIterator___next__(self)
    def previous(self): return _Clex_module.SwigPyIterator_previous(self)
    def advance(self, *args): return _Clex_module.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Clex_module.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Clex_module.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Clex_module.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Clex_module.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Clex_module.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Clex_module.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Clex_module.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _Clex_module.StrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Clex_module.StrVector___nonzero__(self)
    def __bool__(self): return _Clex_module.StrVector___bool__(self)
    def __len__(self): return _Clex_module.StrVector___len__(self)
    def pop(self): return _Clex_module.StrVector_pop(self)
    def __getslice__(self, *args): return _Clex_module.StrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _Clex_module.StrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _Clex_module.StrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _Clex_module.StrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _Clex_module.StrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _Clex_module.StrVector___setitem__(self, *args)
    def append(self, *args): return _Clex_module.StrVector_append(self, *args)
    def empty(self): return _Clex_module.StrVector_empty(self)
    def size(self): return _Clex_module.StrVector_size(self)
    def clear(self): return _Clex_module.StrVector_clear(self)
    def swap(self, *args): return _Clex_module.StrVector_swap(self, *args)
    def get_allocator(self): return _Clex_module.StrVector_get_allocator(self)
    def begin(self): return _Clex_module.StrVector_begin(self)
    def end(self): return _Clex_module.StrVector_end(self)
    def rbegin(self): return _Clex_module.StrVector_rbegin(self)
    def rend(self): return _Clex_module.StrVector_rend(self)
    def pop_back(self): return _Clex_module.StrVector_pop_back(self)
    def erase(self, *args): return _Clex_module.StrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _Clex_module.new_StrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Clex_module.StrVector_push_back(self, *args)
    def front(self): return _Clex_module.StrVector_front(self)
    def back(self): return _Clex_module.StrVector_back(self)
    def assign(self, *args): return _Clex_module.StrVector_assign(self, *args)
    def resize(self, *args): return _Clex_module.StrVector_resize(self, *args)
    def insert(self, *args): return _Clex_module.StrVector_insert(self, *args)
    def reserve(self, *args): return _Clex_module.StrVector_reserve(self, *args)
    def capacity(self): return _Clex_module.StrVector_capacity(self)
    __swig_destroy__ = _Clex_module.delete_StrVector
    __del__ = lambda self : None;
StrVector_swigregister = _Clex_module.StrVector_swigregister
StrVector_swigregister(StrVector)

class StrPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Clex_module.new_StrPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _Clex_module.StrPair_first_set
    __swig_getmethods__["first"] = _Clex_module.StrPair_first_get
    if _newclass:first = _swig_property(_Clex_module.StrPair_first_get, _Clex_module.StrPair_first_set)
    __swig_setmethods__["second"] = _Clex_module.StrPair_second_set
    __swig_getmethods__["second"] = _Clex_module.StrPair_second_get
    if _newclass:second = _swig_property(_Clex_module.StrPair_second_get, _Clex_module.StrPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _Clex_module.delete_StrPair
    __del__ = lambda self : None;
StrPair_swigregister = _Clex_module.StrPair_swigregister
StrPair_swigregister(StrPair)

class StrPairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrPairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrPairVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _Clex_module.StrPairVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Clex_module.StrPairVector___nonzero__(self)
    def __bool__(self): return _Clex_module.StrPairVector___bool__(self)
    def __len__(self): return _Clex_module.StrPairVector___len__(self)
    def pop(self): return _Clex_module.StrPairVector_pop(self)
    def __getslice__(self, *args): return _Clex_module.StrPairVector___getslice__(self, *args)
    def __setslice__(self, *args): return _Clex_module.StrPairVector___setslice__(self, *args)
    def __delslice__(self, *args): return _Clex_module.StrPairVector___delslice__(self, *args)
    def __delitem__(self, *args): return _Clex_module.StrPairVector___delitem__(self, *args)
    def __getitem__(self, *args): return _Clex_module.StrPairVector___getitem__(self, *args)
    def __setitem__(self, *args): return _Clex_module.StrPairVector___setitem__(self, *args)
    def append(self, *args): return _Clex_module.StrPairVector_append(self, *args)
    def empty(self): return _Clex_module.StrPairVector_empty(self)
    def size(self): return _Clex_module.StrPairVector_size(self)
    def clear(self): return _Clex_module.StrPairVector_clear(self)
    def swap(self, *args): return _Clex_module.StrPairVector_swap(self, *args)
    def get_allocator(self): return _Clex_module.StrPairVector_get_allocator(self)
    def begin(self): return _Clex_module.StrPairVector_begin(self)
    def end(self): return _Clex_module.StrPairVector_end(self)
    def rbegin(self): return _Clex_module.StrPairVector_rbegin(self)
    def rend(self): return _Clex_module.StrPairVector_rend(self)
    def pop_back(self): return _Clex_module.StrPairVector_pop_back(self)
    def erase(self, *args): return _Clex_module.StrPairVector_erase(self, *args)
    def __init__(self, *args): 
        this = _Clex_module.new_StrPairVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Clex_module.StrPairVector_push_back(self, *args)
    def front(self): return _Clex_module.StrPairVector_front(self)
    def back(self): return _Clex_module.StrPairVector_back(self)
    def assign(self, *args): return _Clex_module.StrPairVector_assign(self, *args)
    def resize(self, *args): return _Clex_module.StrPairVector_resize(self, *args)
    def insert(self, *args): return _Clex_module.StrPairVector_insert(self, *args)
    def reserve(self, *args): return _Clex_module.StrPairVector_reserve(self, *args)
    def capacity(self): return _Clex_module.StrPairVector_capacity(self)
    __swig_destroy__ = _Clex_module.delete_StrPairVector
    __del__ = lambda self : None;
StrPairVector_swigregister = _Clex_module.StrPairVector_swigregister
StrPairVector_swigregister(StrPairVector)

class Clex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Clex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Clex, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Clex_module.new_Clex()
        try: self.this.append(this)
        except: self.this = this
    def setSimilarity(self, *args): return _Clex_module.Clex_setSimilarity(self, *args)
    def setDataSet(self, *args): return _Clex_module.Clex_setDataSet(self, *args)
    def setExternalIndex(self, *args): return _Clex_module.Clex_setExternalIndex(self, *args)
    def setInternalIndex(self, *args): return _Clex_module.Clex_setInternalIndex(self, *args)
    def createRelationSDN(self, *args): return _Clex_module.Clex_createRelationSDN(self, *args)
    def setRealPartition(self, *args): return _Clex_module.Clex_setRealPartition(self, *args)
    def setGeneratedPartition(self, *args): return _Clex_module.Clex_setGeneratedPartition(self, *args)
    def calculateValidationIndex(self): return _Clex_module.Clex_calculateValidationIndex(self)
    def calculateExternalIndex(self): return _Clex_module.Clex_calculateExternalIndex(self)
    def calculateInternalIndex(self): return _Clex_module.Clex_calculateInternalIndex(self)
    def showInternalIndex(self): return _Clex_module.Clex_showInternalIndex(self)
    def showExternalIndex(self): return _Clex_module.Clex_showExternalIndex(self)
    __swig_destroy__ = _Clex_module.delete_Clex
    __del__ = lambda self : None;
Clex_swigregister = _Clex_module.Clex_swigregister
Clex_swigregister(Clex)

# This file is compatible with both classic and new-style classes.


